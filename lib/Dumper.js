// Generated by CoffeeScript 1.7.1
var Dumper, Inline, Utils;
var doubleQuotesFound = false;

Utils = require('./Utils');

Inline = require('./Inline');

Dumper = (function() {
  function Dumper() {}

  Dumper.indentation = 4;

  Dumper.prototype.dump = function(input, inline, indent, exceptionOnInvalidType, objectEncoder, wasArray, metaDataConf) {
    var key, output, prefix, value, willBeInlined, _i, _len;
    if (inline == null) {
      inline = 0;
    }
    if (indent == null) {
      indent = 0;
    }
    if (exceptionOnInvalidType == null) {
      exceptionOnInvalidType = false;
    }
    if (objectEncoder == null) {
      objectEncoder = null;
    }
    if (wasArray == null) {
        wasArray = false;
    }
    if (metaDataConf == null) {
        metaDataConf = null;
    }
    output = '';
    prefix = (indent ? Utils.strRepeat(' ', indent) : '');
    if (inline <= 0 || typeof input !== 'object' || input instanceof Date || Utils.isEmpty(input)) {
         if (typeof input !== 'object')
             output += prefix + Inline.dump(input, exceptionOnInvalidType, objectEncoder, true, doubleQuotesFound, metaDataConf);
         else
             output += prefix + Inline.dump(input, exceptionOnInvalidType, objectEncoder, false, doubleQuotesFound, metaDataConf);
    } else {
      if (input instanceof Array) {
        for (_i = 0, _len = input.length; _i < _len; _i++) {
          value = input[_i];
          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);
          output += prefix + '- ' + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder, true, metaDataConf) + (willBeInlined ? "\n" : '');
        }
      } else {
        for (key in input) {
          value = input[key];
          willBeInlined = inline - 1 <= 0 || typeof value !== 'object' || Utils.isEmpty(value);

            doubleQuotesFound = false;

          if (metaDataConf !== null ) {
            for (var item in metaDataConf.double_quotes){
              if (key === metaDataConf.double_quotes[item]) {
                  doubleQuotesFound = true;
              }
            }
          }

          if (wasArray) {
              var array_prefix = (indent ? Utils.strRepeat(' ', indent - 2) : '');
              output += array_prefix + Inline.dump(key, exceptionOnInvalidType, objectEncoder, false, false, metaDataConf) + ':' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder, false, metaDataConf) + (willBeInlined ? "\n" : '');
              wasArray = false;
          } else {
              output += prefix + Inline.dump(key, exceptionOnInvalidType, objectEncoder, false, false, metaDataConf) + ':' + (willBeInlined ? ' ' : "\n") + this.dump(value, inline - 1, (willBeInlined ? 0 : indent + this.indentation), exceptionOnInvalidType, objectEncoder, false, metaDataConf) + (willBeInlined ? "\n" : '');
          }
        }
      }
    }
    return output;
  };

  return Dumper;

})();

module.exports = Dumper;
